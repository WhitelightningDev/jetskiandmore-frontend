/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as WeatherIndexRouteImport } from './routes/weather/index'
import { Route as SafetyIndexRouteImport } from './routes/safety/index'
import { Route as RidesIndexRouteImport } from './routes/rides/index'
import { Route as LocationsIndexRouteImport } from './routes/locations/index'
import { Route as HomeIndexRouteImport } from './routes/home/index'
import { Route as ContactIndexRouteImport } from './routes/contact/index'
import { Route as AddOnsIndexRouteImport } from './routes/add-ons/index'
import { Route as BookingsIndexRouteImport } from './routes/Bookings/index'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const WeatherIndexRoute = WeatherIndexRouteImport.update({
  id: '/weather/',
  path: '/weather/',
  getParentRoute: () => rootRouteImport,
} as any)
const SafetyIndexRoute = SafetyIndexRouteImport.update({
  id: '/safety/',
  path: '/safety/',
  getParentRoute: () => rootRouteImport,
} as any)
const RidesIndexRoute = RidesIndexRouteImport.update({
  id: '/rides/',
  path: '/rides/',
  getParentRoute: () => rootRouteImport,
} as any)
const LocationsIndexRoute = LocationsIndexRouteImport.update({
  id: '/locations/',
  path: '/locations/',
  getParentRoute: () => rootRouteImport,
} as any)
const HomeIndexRoute = HomeIndexRouteImport.update({
  id: '/home/',
  path: '/home/',
  getParentRoute: () => rootRouteImport,
} as any)
const ContactIndexRoute = ContactIndexRouteImport.update({
  id: '/contact/',
  path: '/contact/',
  getParentRoute: () => rootRouteImport,
} as any)
const AddOnsIndexRoute = AddOnsIndexRouteImport.update({
  id: '/add-ons/',
  path: '/add-ons/',
  getParentRoute: () => rootRouteImport,
} as any)
const BookingsIndexRoute = BookingsIndexRouteImport.update({
  id: '/Bookings/',
  path: '/Bookings/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/Bookings': typeof BookingsIndexRoute
  '/add-ons': typeof AddOnsIndexRoute
  '/contact': typeof ContactIndexRoute
  '/home': typeof HomeIndexRoute
  '/locations': typeof LocationsIndexRoute
  '/rides': typeof RidesIndexRoute
  '/safety': typeof SafetyIndexRoute
  '/weather': typeof WeatherIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/Bookings': typeof BookingsIndexRoute
  '/add-ons': typeof AddOnsIndexRoute
  '/contact': typeof ContactIndexRoute
  '/home': typeof HomeIndexRoute
  '/locations': typeof LocationsIndexRoute
  '/rides': typeof RidesIndexRoute
  '/safety': typeof SafetyIndexRoute
  '/weather': typeof WeatherIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/Bookings/': typeof BookingsIndexRoute
  '/add-ons/': typeof AddOnsIndexRoute
  '/contact/': typeof ContactIndexRoute
  '/home/': typeof HomeIndexRoute
  '/locations/': typeof LocationsIndexRoute
  '/rides/': typeof RidesIndexRoute
  '/safety/': typeof SafetyIndexRoute
  '/weather/': typeof WeatherIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/Bookings'
    | '/add-ons'
    | '/contact'
    | '/home'
    | '/locations'
    | '/rides'
    | '/safety'
    | '/weather'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/Bookings'
    | '/add-ons'
    | '/contact'
    | '/home'
    | '/locations'
    | '/rides'
    | '/safety'
    | '/weather'
  id:
    | '__root__'
    | '/'
    | '/Bookings/'
    | '/add-ons/'
    | '/contact/'
    | '/home/'
    | '/locations/'
    | '/rides/'
    | '/safety/'
    | '/weather/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BookingsIndexRoute: typeof BookingsIndexRoute
  AddOnsIndexRoute: typeof AddOnsIndexRoute
  ContactIndexRoute: typeof ContactIndexRoute
  HomeIndexRoute: typeof HomeIndexRoute
  LocationsIndexRoute: typeof LocationsIndexRoute
  RidesIndexRoute: typeof RidesIndexRoute
  SafetyIndexRoute: typeof SafetyIndexRoute
  WeatherIndexRoute: typeof WeatherIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/weather/': {
      id: '/weather/'
      path: '/weather'
      fullPath: '/weather'
      preLoaderRoute: typeof WeatherIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/safety/': {
      id: '/safety/'
      path: '/safety'
      fullPath: '/safety'
      preLoaderRoute: typeof SafetyIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/rides/': {
      id: '/rides/'
      path: '/rides'
      fullPath: '/rides'
      preLoaderRoute: typeof RidesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/locations/': {
      id: '/locations/'
      path: '/locations'
      fullPath: '/locations'
      preLoaderRoute: typeof LocationsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/home/': {
      id: '/home/'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contact/': {
      id: '/contact/'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/add-ons/': {
      id: '/add-ons/'
      path: '/add-ons'
      fullPath: '/add-ons'
      preLoaderRoute: typeof AddOnsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/Bookings/': {
      id: '/Bookings/'
      path: '/Bookings'
      fullPath: '/Bookings'
      preLoaderRoute: typeof BookingsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BookingsIndexRoute: BookingsIndexRoute,
  AddOnsIndexRoute: AddOnsIndexRoute,
  ContactIndexRoute: ContactIndexRoute,
  HomeIndexRoute: HomeIndexRoute,
  LocationsIndexRoute: LocationsIndexRoute,
  RidesIndexRoute: RidesIndexRoute,
  SafetyIndexRoute: SafetyIndexRoute,
  WeatherIndexRoute: WeatherIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
